// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: stock.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StockHandle_GetStockByNameAndOptionalDate_FullMethodName = "/api.StockHandle/GetStockByNameAndOptionalDate"
)

// StockHandleClient is the client API for StockHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockHandleClient interface {
	GetStockByNameAndOptionalDate(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
}

type stockHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewStockHandleClient(cc grpc.ClientConnInterface) StockHandleClient {
	return &stockHandleClient{cc}
}

func (c *stockHandleClient) GetStockByNameAndOptionalDate(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockHandle_GetStockByNameAndOptionalDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockHandleServer is the server API for StockHandle service.
// All implementations must embed UnimplementedStockHandleServer
// for forward compatibility
type StockHandleServer interface {
	GetStockByNameAndOptionalDate(context.Context, *StockRequest) (*StockResponse, error)
	mustEmbedUnimplementedStockHandleServer()
}

// UnimplementedStockHandleServer must be embedded to have forward compatible implementations.
type UnimplementedStockHandleServer struct {
}

func (UnimplementedStockHandleServer) GetStockByNameAndOptionalDate(context.Context, *StockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockByNameAndOptionalDate not implemented")
}
func (UnimplementedStockHandleServer) mustEmbedUnimplementedStockHandleServer() {}

// UnsafeStockHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockHandleServer will
// result in compilation errors.
type UnsafeStockHandleServer interface {
	mustEmbedUnimplementedStockHandleServer()
}

func RegisterStockHandleServer(s grpc.ServiceRegistrar, srv StockHandleServer) {
	s.RegisterService(&StockHandle_ServiceDesc, srv)
}

func _StockHandle_GetStockByNameAndOptionalDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockHandleServer).GetStockByNameAndOptionalDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockHandle_GetStockByNameAndOptionalDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockHandleServer).GetStockByNameAndOptionalDate(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockHandle_ServiceDesc is the grpc.ServiceDesc for StockHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StockHandle",
	HandlerType: (*StockHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockByNameAndOptionalDate",
			Handler:    _StockHandle_GetStockByNameAndOptionalDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
